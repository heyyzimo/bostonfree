////  MapViewController.swift//  BostonFree////  Created by user267597 on 12/4/24.//import UIKitimport MapKitimport FirebaseFirestoreimport CoreLocationclass MapViewController: UIViewController {        let locationManager = CLLocationManager()    let db = Firestore.firestore()        var userLocation: CLLocation?    var events: [EventModel] = []    var sortedEvents: [EventModel] = []    var selectedEvent: EventModel?        override func loadView() {        self.view = MapViewUI()    }        override func viewDidLoad() {        super.viewDidLoad()        self.title = "Nearby Events"                let mapViewUI = self.view as! MapViewUI        view.backgroundColor = .white                setupLocationManager()        setupTableView(mapViewUI: mapViewUI)        setupDetailsView(mapViewUI: mapViewUI)        fetchEvents()                mapViewUI.detailsView.isHidden = true        mapViewUI.tableView.isHidden = false        mapViewUI.mapView.delegate = self    }        func setupTableView(mapViewUI: MapViewUI) {        mapViewUI.tableView.delegate = self        mapViewUI.tableView.dataSource = self        mapViewUI.tableView.register(EventTableViewCell.self, forCellReuseIdentifier: "EventCell")        mapViewUI.tableView.rowHeight = 150        mapViewUI.tableView.separatorStyle = .none    }        func setupDetailsView(mapViewUI: MapViewUI) {        mapViewUI.backButton.addTarget(self, action: #selector(handleBackButton), for: .touchUpInside)        mapViewUI.goButton.addTarget(self, action: #selector(handleGoButton), for: .touchUpInside)    }        @objc func handleBackButton() {        let mapViewUI = self.view as! MapViewUI        mapViewUI.detailsView.isHidden = true        mapViewUI.tableView.isHidden = false    }        @objc func handleGoButton() {        guard let event = selectedEvent else { return }        navigateToEventLocation(event: event)    }        func navigateToEventLocation(event: EventModel) {        let coordinate = CLLocationCoordinate2D(latitude: event.latitude, longitude: event.longitude)        let placemark = MKPlacemark(coordinate: coordinate)        let mapItem = MKMapItem(placemark: placemark)        mapItem.name = event.name        // 打开系统地图进行导航        mapItem.openInMaps(launchOptions: [MKLaunchOptionsDirectionsModeKey: MKLaunchOptionsDirectionsModeDriving])    }        func setupLocationManager() {        locationManager.delegate = self        locationManager.desiredAccuracy = kCLLocationAccuracyBest        checkLocationAuthorization()    }        func checkLocationAuthorization() {        switch locationManager.authorizationStatus {        case .authorizedWhenInUse, .authorizedAlways:            let mapViewUI = self.view as! MapViewUI            mapViewUI.mapView.showsUserLocation = true            locationManager.startUpdatingLocation()        case .denied, .restricted:            showAlert(message: "Location access is needed to display nearby events.")        case .notDetermined:            locationManager.requestWhenInUseAuthorization()        @unknown default:            break        }    }        func fetchEvents() {        db.collection("events").addSnapshotListener { [weak self] (snapshot, error) in            if let error = error {                self?.showAlert(message: "Error fetching events: \(error.localizedDescription)")                return            }            guard let documents = snapshot?.documents else { return }            self?.events = documents.map { doc in                return EventModel(documentId: doc.documentID, dictionary: doc.data())            }            self?.sortEventsByDistance()            self?.addAnnotations()            let mapViewUI = self?.view as! MapViewUI            mapViewUI.tableView.reloadData()                        if let selected = self?.selectedEvent {                self?.selectEvent(selected)            }        }    }        func sortEventsByDistance() {        guard let userLocation = userLocation else {            sortedEvents = events            return        }        sortedEvents = events.sorted { (event1, event2) -> Bool in            let location1 = CLLocation(latitude: event1.latitude, longitude: event1.longitude)            let location2 = CLLocation(latitude: event2.latitude, longitude: event2.longitude)            return location1.distance(from: userLocation) < location2.distance(from: userLocation)        }    }        func addAnnotations() {        let mapViewUI = self.view as! MapViewUI        mapViewUI.mapView.removeAnnotations(mapViewUI.mapView.annotations.filter { !($0 is MKUserLocation) })        for event in sortedEvents {            let annotation = MKPointAnnotation()            annotation.title = event.name            annotation.subtitle = event.location            annotation.coordinate = CLLocationCoordinate2D(latitude: event.latitude, longitude: event.longitude)            mapViewUI.mapView.addAnnotation(annotation)        }    }        func showAlert(message: String) {        let alert = UIAlertController(title: "Notice",                                      message: message,                                      preferredStyle: .alert)        alert.addAction(UIAlertAction(title: "OK",                                      style: .default,                                      handler: nil))        present(alert, animated: true, completion: nil)    }        func selectEvent(_ event: EventModel) {        self.selectedEvent = event        let mapViewUI = self.view as! MapViewUI        let coordinate = CLLocationCoordinate2D(latitude: event.latitude, longitude: event.longitude)        let region = MKCoordinateRegion(center: coordinate,                                        latitudinalMeters: 1000,                                        longitudinalMeters: 1000)        mapViewUI.mapView.setRegion(region, animated: true)                if let annotation = mapViewUI.mapView.annotations.first(where: { ($0.title ?? "") == event.name }) {            mapViewUI.mapView.selectAnnotation(annotation, animated: true)        }                displayDetails(for: event)                mapViewUI.tableView.isHidden = true        mapViewUI.detailsView.isHidden = false    }        func displayDetails(for event: EventModel) {        let mapViewUI = self.view as! MapViewUI        let descriptionText = event.description ?? "No Description"        let websiteText = event.website ?? "N/A"        let formatter = DateFormatter()        formatter.dateStyle = .short        formatter.timeStyle = .short        formatter.timeZone = TimeZone.current        let startTimeString = formatter.string(from: event.startTime)        let endTimeString = formatter.string(from: event.endTime)        let detailsText = """        \(event.name)                Start Time: \(startTimeString)                End Time: \(endTimeString)                Location: \(event.location)        Description:        \(descriptionText)        Website: \(websiteText)        """        let attributedText = NSMutableAttributedString(string: detailsText)        let boldKeywords = ["Start Time", "End Time", "Location:", "Description:", "Website:"]        attributedText.addAttribute(.font, value: UIFont.systemFont(ofSize: 16), range: NSRange(location: 0, length: detailsText.utf16.count))        for keyword in boldKeywords {            if let range = detailsText.range(of: keyword) {                let nsRange = NSRange(range, in: detailsText)                attributedText.addAttribute(.font, value: UIFont.boldSystemFont(ofSize: 18), range: nsRange)            }        }        if let nameRange = detailsText.range(of: event.name) {            let nsRange = NSRange(nameRange, in: detailsText)            attributedText.addAttribute(.font, value: UIFont.boldSystemFont(ofSize: 20), range: nsRange)        }        mapViewUI.detailsLabel.attributedText = attributedText    }    override func viewWillAppear(_ animated: Bool) {        super.viewWillAppear(animated)        if let selected = selectedEvent {            selectEvent(selected)        } else {            let mapViewUI = self.view as! MapViewUI            mapViewUI.detailsView.isHidden = true            mapViewUI.tableView.isHidden = false        }    }}extension MapViewController: CLLocationManagerDelegate {    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {        checkLocationAuthorization()    }        func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {        guard let latestLocation = locations.last else { return }        userLocation = latestLocation        let region = MKCoordinateRegion(center: latestLocation.coordinate,                                        latitudinalMeters: 1000,                                        longitudinalMeters: 1000)        let mapViewUI = self.view as! MapViewUI        mapViewUI.mapView.setRegion(region, animated: true)        sortEventsByDistance()        addAnnotations()        mapViewUI.tableView.reloadData()        locationManager.stopUpdatingLocation()                if let selected = selectedEvent {            selectEvent(selected)        }    }        func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {        showAlert(message: "Failed to get your location: \(error.localizedDescription)")    }}extension MapViewController: MKMapViewDelegate {    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {        guard let annotation = view.annotation,              let eventName = annotation.title ?? "" else { return }        if let event = sortedEvents.first(where: { $0.name == eventName }) {            selectEvent(event)        }    }}extension MapViewController: UITableViewDataSource, UITableViewDelegate {    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {         return sortedEvents.count    }         func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {        guard let cell = tableView.dequeueReusableCell(withIdentifier: "EventCell", for: indexPath) as? EventTableViewCell else {            return UITableViewCell()        }        let event = sortedEvents[indexPath.row]        let location = CLLocation(latitude: event.latitude, longitude: event.longitude)        let distanceInMeters = userLocation?.distance(from: location) ?? 0        let distanceString = String(format: "%.1f km", distanceInMeters / 1000)        cell.configure(with: event)        cell.distanceLabel.text = "\(distanceString) away"        return cell    }        func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {        return 150    }        func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {        let selectedEvent = sortedEvents[indexPath.row]        selectEvent(selectedEvent)        tableView.deselectRow(at: indexPath, animated: true)    }}